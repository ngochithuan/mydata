# -*- coding: utf-8 -*-
"""523H0102.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NGE_5HgulIUp2RMJFNQaHAcM_MDXDpaY
"""

#Ngo Chi Thuan - 523H0102

#Import lib
import numpy as np

A = np.random.randint(1, (100+1), (10, 10))
B = np.random.randint(1, (20+1), (2, 10))
C = np.random.randint(1, (20+1), (10, 2))
print("Matrix A =\n", A,"\n")
print("Matrix B =\n", B,"\n")
print("Matrix C =\n", C,"\n")

print("--------------------------------------------------------------\n")

#a. Calculate and print result
Sol1a = np.add(np.add(np.add(A, A.T), np.matmul(C, B)), np.matmul(B.T, C.T))
print("Task 1a:\nA + A^T + CB + (B^T)(C^T) =\n", Sol1a)
print("--------------------------------------------------------------\n")


#b. Calculate and print result
Sol1b = np.zeros((A.shape[0], A.shape[1]))

for i in range (1, (10+1)):
  temp1b = 1/(10+(i-1))
  Sol1b = np.add(Sol1b, (np.linalg.matrix_power((temp1b*A), i)))
print("Task 1b:\n(A/10) + (A/11)^2 + (A/12)^3 + ... + (A/17)^8 + (A/18)^9 + (A/19)^10 = \n", Sol1b)

print("--------------------------------------------------------------\n")

#c. Save odd rows of A to new matrix and print
#Create new matrix
Sol1c = A[0::2,:]
print("Task 1c:\nA matrix stores odd rows of the matrix A:\n", Sol1c)

print("--------------------------------------------------------------\n")

#d. Save odd integer numbers in A to new vector
#Count the number of odd numbers
count1d = 0
i = 0
for row in range(0, (A.shape[0])):
  for col in range(0, (A.shape[1])):
    if((A[row][col]) %2 != 0):
      count1d += 1

#Create a vector
Sol1d = np.empty(count1d)
#Append odd integer numbers into vector
for row in range(0, (A.shape[0])):
  for col in range(0, (A.shape[1])):
    if((A[row][col]) %2 != 0):
      Sol1d[i] = (A[row][col])
      i += 1
print("Task 1d:\nA vector stores odd numbers of matrix A:\n", Sol1d)

print("--------------------------------------------------------------\n")

#e. Save prime numbers of A to new matrix
#Define CheckPrime
def Prime(num):
  if (num <= 1):
    return False
  else:
    for i in range(2, (int)(num/2)+1):
      if (num % i == 0):
        return False
    return True

#Count Prime numbers in matrix A
count1e = 0
j = 0
for row in range(0, (A.shape[0])):
  for col in range(0, (A.shape[1])):
    if (Prime(A[row][col])):
      count1e += 1

#Create a vector
Sol1e = np.empty(count1e)
#Append Prime numbers into a vector
for row in range(0, (A.shape[0])):
  for col in range(0, (A.shape[1])):
    if(Prime(A[row][col])):
      Sol1e[j] = A[row][col]
      j += 1
print("Task 1e:\nA vector stores prime numbers of matrix A:\n", Sol1e)

print("--------------------------------------------------------------\n")

#f. Matrix D = C*B, reverse elements in the odd rows of matrix D
D = np.matmul(C, B)
D_rev = np.copy(D)

#Reverse
def ReverseArr(arr):
  rev = arr[(len(arr)-1)::-1]
  return rev

for i in range(0, D_rev.shape[0]):
  if((i + 1) % 2 != 0):
    D_rev[i] = ReverseArr(D_rev[i])
print("Task 1f:\nMatrix D = \n", D,"\n\nThe matrix after reversed odd rows of matrix D:")
print(D_rev)

print("--------------------------------------------------------------\n")

#g. Find rows have max count of Prime numbers of matrix A
DataPrime = np.empty(A.shape[0])

#Function to count Prime in an array
def CountPrime(arr):
  countp = 0
  for i in range(0, len(arr)):
    if (Prime(arr[i])):
      countp += 1
  return countp

#Count the number of Prime number of each row
for i in range (0, A.shape[0]):
  DataPrime[i] = CountPrime(A[i])

#Find max
maxg = max(DataPrime)

print("Task 1g:\nRows have max count of Prime numbers of matrix A:\n")
#Print rows which have most Prime numbers
for i in range (0, A.shape[0]):
  if (DataPrime[i] == maxg):
    print(A[i])

print("--------------------------------------------------------------")

#h. Find the rows which have the longest contiguous odd numbers sequence
DataOddSteak = np.empty(A.shape[0])

#Function count odd steak
def OddSteak(arr):
  currentsteak = 0
  maxsteak = 0
  for i in range(0, len(arr)):
    if ((arr[i]) %2 != 0):
      currentsteak += 1
    else:
      currentsteak = 0
    if (currentsteak > maxsteak):
      maxsteak = currentsteak
  return maxsteak

#Odd numbers steak of each row
for i in range (0, A.shape[0]):
  DataOddSteak[i] = OddSteak(A[i])

#Find max
maxh = max(DataOddSteak)

print("Task 1h:\nrows have the longest contiguous odd numbers sequence:")
#Print rows which have most odd numbers steak
for i in range (0, A.shape[0]):
  if (DataOddSteak[i] == maxh):
    print(A[i])